"""
Django settings for carmagnole project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta
load_dotenv()
from redis import BlockingConnectionPool, Redis
from redis.asyncio import Redis as AsyncRedis, ConnectionPool as AsyncConnectionPool

from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Django settings.py

# Allow requests only from your production domain
ALLOWED_HOSTS = ['carmagnole.ohnoimded.com']

# CSRF settings
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False 
CSRF_COOKIE_SAMESITE = 'None'  
CSRF_COOKIE_SECURE = True  #this needs to be True if using HTTPS

# Session settings
SESSION_COOKIE_SAMESITE = 'None' 
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = True 
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# CORS settings
CORS_ALLOW_CREDENTIALS = True  # Allow cookies and credentials.

CORS_ALLOWED_ORIGINS = (
    'https://carmagnole.ohnoimded.com',  
    # "https://localhost:3001"
)

CORS_ALLOW_HEADERS = [
    'content-type',
    'x-csrftoken',
    'authorization',
    'sessionid',
    'api-version',
    'server',
]



# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework_simplejwt.token_blacklist',
    "rest_framework",  
    'corsheaders',
    "channels",
    "django_celery_beat",
    "django_filters",
    "authenticate",
    "api",
    'etl',
    'analytics',
    'utils',
    'mails',
    'templates',
    # 'channels',
    # 'market_data_sse',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "carmagnole.middleware.middleware.HideServerHeadersMiddleware",
    "carmagnole.middleware.middleware.VersioningMiddleware",
    "carmagnole.middleware.middleware.TrackAccessMiddleware"
]

ROOT_URLCONF = "carmagnole.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [ BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

ASGI_APPLICATION = "carmagnole.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        # 'NAME': os.environ.get('POSTGRES_DB'),
        # 'USER': os.environ.get('POSTGRES_USERID'),
        # 'PASSWORD': os.environ.get('POSTGRES_PWD'),
        # 'HOST': 'host.docker.internal',  #use 'localhost' for running locally
        # 'PORT': '5432',
        'NAME': os.environ.get('POSTGRES_AWS_DB'),
        'USER': os.environ.get('POSTGRES_AWS_USERID'),
        'PASSWORD': os.environ.get('POSTGRES_AWS_PWD'),
        'HOST': os.environ.get('POSTGRES_AWS_HOST'), 
        'PORT': os.environ.get('POSTGRES_AWS_PORT'),
        # 'CONN_MAX_AGE': 60,
        'OPTIONS': {
            'connect_timeout': 10,
            'pool': {
                'max_size': 40, 
                'min_size': 10,
                'timeout': 30,
                'max_waiting': 3, 
            }
        },

        # 'USER': os.environ.get('POSTGRES_AWS_USERID'),
        # 'PASSWORD': os.environ.get('POSTGRES_AWS_PWD'),
        # 'HOST': os.environ.get('POSTGRES_AWS_HOST'),  #use 'localhost' for running locally
        # 'PORT': os.environ.get('POSTGRES_AWS_PORT'),
    },

    "secondary": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


REDIS_POOL = BlockingConnectionPool(
    host=os.environ.get("REDIS_HOST"),
    port=os.environ.get("REDIS_PORT"),
    db=os.environ.get("REDIS_DB"),
    password=os.environ.get("REDIS_PASSWORD", None),
    max_connections=1000,  
    socket_timeout=1500, 
)

redis_client = Redis(connection_pool=REDIS_POOL, decode_responses=True)

ASYNC_REDIS_POOL = AsyncConnectionPool.from_url(
    'redis://{}:{}/{}'.format(
        os.environ.get("REDIS_HOST"),
        os.environ.get("REDIS_PORT"),
        os.environ.get("REDIS_DB"),
    ),
    decode_responses=True,
    encoding='utf-8'
)

async_redis_client = AsyncRedis(connection_pool=ASYNC_REDIS_POOL)

REDIS = {
    "default": {
        "POOL": REDIS_POOL,
    },
    "async_default": {
        "POOL": ASYNC_REDIS_POOL,
    }
}

redis_config = REDIS["default"]

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{os.environ.get('REDIS_HOST')}:{os.environ.get('REDIS_PORT')}/{os.environ.get('REDIS_DB')}",
        'OPTIONS': {
            'DB': os.environ.get("REDIS_DB", 0),
            'PASSWORD': os.environ.get("REDIS_PASSWORD", None),
            'CONNECTION_POOL_CLASS': 'redis.ConnectionPool',     
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 1000,   
                'timeout': 1500,           
            },
            'TIMEOUT': 60,               
        },
    },
}

CELERY_BROKER_URL = f'redis://{os.environ.get("REDIS_HOST")}:{os.environ.get("REDIS_PORT")}/{os.environ.get("REDIS_DB")}'
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_RESULT_EXPIRES = 1200 # 20 mins expiry
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_RESULT_EXPIRES = 3600


CELERY_BROKER_TRANSPORT_OPTIONS = {
    'pool': {
        'max_connections': 1000,  
        'timeout': 1500, 
        'class': 'redis.ConnectionPool',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTH_USER_MODEL = 'authenticate.User'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # Only JSON, no Browsable API
    ),
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        ],
    'DEFAULT_PAGINATION_CLASS': ['api.api_news.pagination.PageNumberPagination']
    # 'PAGE_SIZE': 10,
}



SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": os.getenv('SIGNING_KEY'),
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=120),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=2),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}



## Mail related

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get("AWS_SES_HOST")
EMAIL_PORT = int(os.environ.get("AWS_SES_PORT",587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("AWS_SES_USER")
EMAIL_HOST_PASSWORD = os.environ.get("AWS_SES_PASSWORD")
DEFAULT_FROM_EMAIL = "La Carmagnole <noreply@carmagnole.ohnoimded.com>"